{
  "Generic Type Definition": {
    "prefix": "type",
    "body": [
      "type ${1:TypeName}[${2:T}] = {",
      "    ${3:field}: ${2:T}${4:,}",
      "    ${5:// Add more fields}",
      "}"
    ],
    "description": "Define a generic type"
  },
  "Array Type": {
    "prefix": "array",
    "body": [
      "type Array[${1:T}] = {",
      "    data: ^${1:T},",
      "    length: Integer,",
      "    capacity: Integer",
      "}"
    ],
    "description": "Define an Array[T] generic type"
  },
  "Result Type": {
    "prefix": "result",
    "body": [
      "type Result[${1:T}] = {",
      "    value: ${1:T},",
      "    isError: Bool",
      "}"
    ],
    "description": "Define a Result[T] generic type"
  },
  "Array Declaration": {
    "prefix": "arr",
    "body": [
      "val ${1:name}: Array[${2:Integer}] = Array[${2:Integer}] {",
      "    data: &${3:value},",
      "    length: ${4:1},",
      "    capacity: ${5:10}",
      "}"
    ],
    "description": "Declare an Array[T] variable"
  },
  "For-in Loop": {
    "prefix": "forin",
    "body": [
      "for ${1:item} in ${2:array} {",
      "    ${3:// Process item}",
      "    print(${1:item})",
      "}"
    ],
    "description": "For-in loop over an array"
  },
  "Function with Generic": {
    "prefix": "fungeneic",
    "body": [
      "fun ${1:functionName}[${2:T}](${3:param}: ${2:T}): ${4:${2:T}} {",
      "    ${5:// Function body}",
      "    return ${3:param}",
      "}"
    ],
    "description": "Define a generic function"
  },
  "Import Statement": {
    "prefix": "import",
    "body": [
      "import { ${1:function} } from \"${2:bolt:stdio}\""
    ],
    "description": "Import statement"
  },
  "Print Statement": {
    "prefix": "print",
    "body": [
      "print(${1:\"message\"})"
    ],
    "description": "Print statement"
  },
  "Native C Block": {
    "prefix": "native",
    "body": [
      "native \"C\" {",
      "    export fun ${1:functionName}(${2:param}: ${3:Type}): ${4:ReturnType}",
      "}"
    ],
    "description": "Native C function block"
  },
  "Import File I/O": {
    "prefix": "importio",
    "body": [
      "import { ${1|readFile,writeFile,appendFile,deleteFile,fileExists|} } from \"bolt:io\""
    ],
    "description": "Import file I/O functions"
  },
  "Import String Utils": {
    "prefix": "importstring",
    "body": [
      "import { ${1|length,concat,indexOf,contains,trim|} } from \"bolt:string\""
    ],
    "description": "Import string utility functions"
  },
  "Import Multiple I/O": {
    "prefix": "importioall",
    "body": [
      "import { readFile, writeFile, appendFile, deleteFile, fileExists } from \"bolt:io\""
    ],
    "description": "Import all file I/O functions"
  },
  "Import Multiple String": {
    "prefix": "importstringall",
    "body": [
      "import { length, concat, indexOf, contains, trim } from \"bolt:string\""
    ],
    "description": "Import all string utility functions"
  },
  "File Read Example": {
    "prefix": "fileread",
    "body": [
      "import { readFile } from \"bolt:io\"",
      "",
      "val content := readFile(\"${1:filename.txt}\")",
      "print(content)"
    ],
    "description": "File reading example"
  },
  "File Write Example": {
    "prefix": "filewrite", 
    "body": [
      "import { writeFile } from \"bolt:io\"",
      "",
      "val success := writeFile(\"${1:output.txt}\", \"${2:Hello, World!}\")",
      "if (success) {",
      "    print(\"File written successfully\")",
      "}"
    ],
    "description": "File writing example"
  },
  "String Concat Example": {
    "prefix": "stringconcat",
    "body": [
      "import { concat } from \"bolt:string\"",
      "",
      "val result := concat(\"${1:Hello, }\", \"${2:World!}\")",
      "print(result)"
    ],
    "description": "String concatenation example"
  },
  "String Search Example": {
    "prefix": "stringsearch",
    "body": [
      "import { contains, indexOf } from \"bolt:string\"",
      "",
      "val text := \"${1:Hello, World!}\"",
      "val hasWorld := contains(text, \"${2:World}\")",
      "if (hasWorld) {",
      "    val index := indexOf(text, \"${2:World}\")",
      "    print(\"Found at position: \")",
      "    print(toString(index))",
      "}"
    ],
    "description": "String search example"
  }
}