{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Bolt",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#native-blocks"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.bolt",
          "match": "\\b(if|else|for|in|while|return)\\b"
        },
        {
          "name": "keyword.declaration.bolt", 
          "match": "\\b(val|var|fun|type|export|import|from|native)\\b"
        },
        {
          "name": "constant.language.bolt",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "storage.type.generic.bolt",
          "match": "\\b[A-Z]\\b(?=\\s*[,\\]>}])"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.bolt",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.bolt",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "name": "constant.numeric.bolt",
      "match": "\\b\\d+\\b"
    },
    "comments": {
      "name": "comment.line.double-slash.bolt",
      "match": "//.*$"
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.bolt",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.bolt",
          "match": "\\b(Integer|String|Bool)\\b"
        },
        {
          "name": "support.type.generic.bolt",
          "match": "\\b(Array|Result|Box|Option)\\b"
        },
        {
          "name": "keyword.operator.generic.bolt",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "include": "#types"
            }
          ]
        },
        {
          "name": "keyword.operator.pointer.bolt",
          "match": "\\^"
        },
        {
          "name": "support.type.custom.bolt",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.bolt",
          "match": ":=|="
        },
        {
          "name": "keyword.operator.comparison.bolt",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.bolt",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.arithmetic.bolt",
          "match": "\\+|\\-|\\*|/|%"
        },
        {
          "name": "keyword.operator.pointer.bolt",
          "match": "&|\\^"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "string.quoted.double.import.bolt",
          "match": "\"[a-zA-Z:]+\"",
          "captures": {
            "0": {
              "name": "string.quoted.double.module.bolt"
            }
          }
        }
      ]
    },
    "native-blocks": {
      "name": "meta.native-block.bolt",
      "begin": "\\b(native)\\s+(\"[A-Z]+\")\\s*\\{",
      "end": "\\}",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.bolt"
        },
        "2": {
          "name": "string.quoted.double.bolt"
        }
      },
      "patterns": [
        {
          "name": "keyword.declaration.bolt",
          "match": "\\b(export|fun)\\b"
        },
        {
          "include": "#functions"
        },
        {
          "include": "#types"
        },
        {
          "include": "#comments"
        }
      ]
    }
  },
  "scopeName": "source.bolt"
}